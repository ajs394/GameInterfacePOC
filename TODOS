### When working on an item, grab everything below a comment.  Leave the 
### comment, say that you're working on it.  Feel free to add to sections or
### create new sections at will

# General code cleanup and refactoring
Add a parent class to character in GameObjects - we should plan for non-char
objects like terrain or whatever

# Character action related
Alec has done a first draft of - > implement a gcd - this would be done at the Character level
Alec has done a first draft of - > ability cooldowns - done at the Player level?  maybe character

# ability use and modification
synergies - in abilities, maybe we should make an ability base class?

# tracking effectiveness of character actions (interesting thing here is 'damage' 
# is a fairly arbitrary thing.  We can measure this with health, some score, 
# call it whatever we want)
health on targets - Character level
 - some way to track damage or whatever at least

# Persistent ability effects
implement some system for buffs
implement dots, etc.
implement terrain and aoe persistent effects
implement delayed effects

potential solution - give Character a list of 'effects' or something where each
is an object.  During Character.update(), scan list and apply on self
{
    class Effect():
        def __init__(self):
            self.message = 'i did something'
        def apply(self, effected):
            # probs something like 'do 2 damage'
            effected.write_message(self.message)

    class Character():
        def __init__(self):
            # existing code
            self.effects = []
        def update(self):
            # existing code
            for effect in self.effects:
                effect.apply(self)
}

# Character movement
planning on implementing click based movement - in game and character
gonna write a quick search algo for shortest path - in game
{
    def findShortestPath(self, pos1, pos2):
        return [(x, y)]
}